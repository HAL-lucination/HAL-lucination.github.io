<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent Feng&#39;s Homepage</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https:/vincentfeng.me/"/>
  <updated>2018-09-02T11:18:31.749Z</updated>
  <id>https:/vincentfeng.me/</id>
  
  <author>
    <name>Vincent Feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity Learning Notes 2 Making a basic AR labyrinth</title>
    <link href="https:/vincentfeng.me/2018/09/01/UnityLearningNotes2/"/>
    <id>https:/vincentfeng.me/2018/09/01/UnityLearningNotes2/</id>
    <published>2018-09-01T09:00:00.000Z</published>
    <updated>2018-09-02T11:18:31.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Labyrinth is a game consisting of a box with a maze on top with holes. The players need to guide the steel marble on the board by knobs on each side to tilt the playfield and get the marble to the goal of the labyrinth. Such a pretty straightforward idea can be obtained by observing the following image.<br><img src="https://i.ytimg.com/vi/mk2hHseviaI/maxresdefault.jpg" alt="Labyrinth"><br>As I went through the process of building a simple maze game last time, this time I will jot down the notes of turning it into an AR-compatible game, in which the user will tilt a cardboard (ideally) or a piece of paper with a marker on it. The result will be like this ↓:</p><p><img src="images/2_result.jpg" alt="result"></p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol><li><p><strong>Design a level (map).</strong> To ensure the job can be done swiftly, it is always nice to have something in mind beforehand. Most good games have really well designed levels with proper challenges to make the game attractive. However, since it is not the main goal at this phase, I suggest just search online to find millions of good maze designs and grab a favorite one and then throw it into the Unity editor. For instance, I used this one in this example.</p><p><img src="https://cdn2.iconfinder.com/data/icons/unigrid-bluetone-maps-travel-vol-2/60/007_083_maze_labyrinth_map_2-512.png" alt="map"></p></li><li><p><strong>Build the maze according to the map.</strong> It is not so hard and the steps were elaborated in the last note. Just use cubes and planes to get the job done. In addition, it is also necessary to drop a steel marble at the entrance. In fact, materials and rendering are not very important in this example, so casually find some wood textures, make a material with diffuse shader, and drag-n-drop it on each part of the maze, and also do the same thing to the marble. An alternative way is to utilize the Asset Store built in the Unity editor, quite a lot textures and materials are free to download and easy to import. My result is shown here.</p></li></ol><p><img src="images/2_level.png" alt="level"></p><ol start="3"><li><strong>Make it AR-compatible.</strong> Head to <em>File</em> - <em>Build Settings</em> - <em>Player Settings…</em> - <em>XR Settings</em> - <em>Vuforia Augmented Reality</em> and make sure the box is checked. When necessary assets are automatically imported, press <em>GameObject</em> - <em>Vuforia</em> - <em>ARCamera</em> to add the <em>ARCamera</em> object into the scene. Then, press <em>GameObject</em> - <em>Vuforia</em> - Image to add the <em>ImageTarget</em> object into the scene as well.</li></ol><p>Before rushing forward, it is necessary to go to <a href="https://developer.vuforia.com/" target="_blank" rel="noopener">https://developer.vuforia.com/</a> to register an account, get a free development key under license manager tab and then head back to Unity editor’s <em>ARCamera</em> object’s inspector panel, press <em>Open Vuforia configuration</em> button and paste the license key to <em>App License Key</em>.</p><p>Then, open the browser again and switch to “Target Manager” tab, “Add Database” with a memorable name and “Device” type. “Add Target” of image type and upload the maze map image we just used in the first step as the marker (just for convenience). When it’s done, press the “Download Database” button and get a .unitypackage file. Return to Unity editor and import the downloaded database. After the import is completed, go to the inspector panel of <em>ImageTarget</em> to select our image target. When it is done, the maze image should appear in the scene. Drag all game objects that belong to the maze and the marble to <em>ImageTarget</em> to make them become children of <em>ImageTarget</em>. This step is important to make apps AR-campatible.</p><ul><li><strong>Attention</strong>: Don’t forget to check the <em>load database/Activate</em> boxes in <em>VuforiaConfiguation</em>. (By pressing <em>Open Vuforia configuration</em> button on the <em>ARCamera</em> object.)</li></ul><p><img src="images/2_activate.png" alt="activate"></p><p>Connect a webcam or use built-in cam on the computer and press “play” to see if the marker is working properly. The maze should appear when the camera detects the marker, if not, double check if the database is activated and try moving the camera around.</p><ol start="4"><li><strong>Make it playable.</strong> If the AR function is working successfully, the only thing left is to make the game playable by adding the necessary physics to the objects. We can achieve this in a easy way. Attach <em>Rigidbody</em> to all static elements (walls, floor, etc.) in the scene and make sure that all objects have <em>collider</em> with them. Uncheck <em>Use Gravity</em> to make sure the labyrinth will not fall out of the view. Also, <em>freeze all positions and rotations</em> of them since we do not want the marble to mess up the whole environment.<br>Since we want the marble to freely move around when we tilt the board, we add <em>Collider</em> and <em>Rigidbody</em> to it as well, however, this time we <em>Use Gravity</em> and do not add any constraint.</li></ol><h3 id="DONE"><a href="#DONE" class="headerlink" title="DONE!"></a>DONE!</h3><p>An AR labyrinth game is made merely with in-built physics engine of Unity without any coding.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Labyrinth is a game consisting of a box with a maze on top
      
    
    </summary>
    
    
      <category term="Unity, Tutorial, Note" scheme="https:/vincentfeng.me/tags/Unity-Tutorial-Note/"/>
    
  </entry>
  
  <entry>
    <title>Unity Learning Notes 1 Making a Simplest Maze</title>
    <link href="https:/vincentfeng.me/2018/08/30/UnityLearningNotes1/"/>
    <id>https:/vincentfeng.me/2018/08/30/UnityLearningNotes1/</id>
    <published>2018-08-30T03:00:00.000Z</published>
    <updated>2018-08-30T04:50:47.987Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://udemy-images.udemy.com/course/750x422/1210008_6859.jpg" alt="Unity Logo"></p><p>As one of the most popular editor/engine to create games, Unity 3D is really suitable for starters because of simplicity and wide support from the community. If the user run into a problem, there mostly exists more than 3 ways to solve it, and they are all few clicks away just by copying &amp; pasting the error to Google.</p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>In this series, I would like to take some memo of the tricky steps I met with during the process of creating things. This can be potentially usefully for my own later reference.</p><p>In this first post of Unity learning notes series, I would like to talk about making a very simple 2D/3D maze without any extra package, the result is shown below in the embedded WebGL player. I am currently using Unity 2017.4.0f1. Most steps should be identical for Unity 5.</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol><li>Create the level using cubes with desired dimensions, or use blender to make a solid 3D model to drag into the Unity editor instead. For the purpose of simplicity, we just use basic shapes provided by Unity this time. After the shape is finished, create an Materials folder under Assets folder, and create a new material for the stage. In my case, I used Legacy Shaders/Diffuse and chose a grey-ish color as the main screen.<ul><li><strong>Attention</strong>: The transform should definitely be taken great care of. In my case, I decided to use the unit of 1.00, and then adjust positions of all objects based on this step. Therefore it will be whole lot easier to mess around will placements or objects, and it will prevent us from getting into wired issues such as player getting stuck in some invisible holes or gaps.</li><li><strong>Attention 2</strong>: Create an empty and drop all stage related objects into this parent, so we can focus on player, enemy and other stuff.</li><li><strong>Attention 3</strong>: Never forget to create a material at first, and then it apply to the desired object. Also, modifying the material directly will affect all objects with that material, so if you want to create colorful stages in different levels as I wanted to do, I suggest create materials such as LevelOneStage, LevelTwoStage, etc.</li></ul></li></ol><p><img src="images/1.png" alt="stage design"></p><ol start="2"><li>Prepare the player and the goal object. The shape can be arbitrary, however, in order to avoid the problem of rotation, I chose the sphere as my player and give it another material to stand out from the stage.</li></ol><p>In this step, we define the movement of the player by attaching a new script called “PlayerMovement.cs” to the player object. We firstly want to make the player ball respond to keyboard input, to roll to the direction when we press down the corresponding arrow key.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class PlayerMovement : MonoBehaviour &#123;</span><br><span class="line">    public float moveSpeed; // Define a force of acceleration when we press down the key.</span><br><span class="line">    private Vector3 input; // Read the keyboard input.</span><br><span class="line">    public float maxSpeed; // Define a max speed for the player.</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">        &#123;</span><br><span class="line">            var rb = this.GetComponent&lt;Rigidbody&gt;(); // We use rigidbody to handle the physics.</span><br><span class="line">            input = new Vector3(Input.GetAxis(&quot;Horizontal&quot;), 0, Input.GetAxis(&quot;Vertical&quot;)); // Deliver the raw keyboard input to the vector &quot;input&quot; we defined here. Since we only want the ball to make 2D moves, the y axis is always 0.</span><br><span class="line">            if (rb.velocity.magnitude &lt; maxSpeed)</span><br><span class="line">            &#123;</span><br><span class="line">                rb.AddForce(input * moveSpeed); // Addforce can push the ball to the direction we want.</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Attention</strong>: Don’t forget to attach rigidbody, and (sphere) collider to the object. If there is no rigidbody, the ball can fall straight down through the floor. The collider is necessary for later hit detection.</li><li><strong>Attention 2</strong>: Since we defined the moveSpeed and maxSpeed as public values, we need to manually type in the desired values we want to user in the Inspector panel before running the scene.</li><li><strong>Attention 3</strong>: If something is not working, check the Edit - Project Settings - Input to see if key bindings are using “Horizontal” and “Vertical”.</li></ul><ol start="3"><li>Before continue to write scripts for the goal object, we firstly need to duplicate the whole scene, in my case I named it “Level 1”, as a new scene “Level 2”. Then we modify the stage design of “Level 2” by adding some walls, obstacles, etc.</li></ol><p><img src="images/2.png" alt="stage 2 design"></p><p>Then, under File - Build Settings… press the “Add Open Scenes” one by one from the first scene to the last scene. It should be like this:</p><p><img src="images/3.png" alt="add scenes"></p><p>Then we can start writing the level changing script that change the level for us when the player touches the goal. Open up the “PlayerMovement.cs” we created before, and add the following scripts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void Update()</span><br><span class="line">   &#123;</span><br><span class="line">    ...</span><br><span class="line">    private void OnTriggerEnter(Collider other) // Called when collided with other colliders.</span><br><span class="line">       &#123;</span><br><span class="line">           if (other.transform.tag == &quot;Goal&quot;) // If collided with an object with &quot;Goal&quot; tag.</span><br><span class="line">           &#123;</span><br><span class="line">               GameManager.CompleteLevel(); // Call the CompleteLevel() function under GameManager.</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Since we need to call the CompleteLevel() function under GameManager, we need to firstly create an empty object called “GameManager” in the scene, and attach a new script “GameManager.cs” to it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class GameManager : MonoBehaviour &#123;</span><br><span class="line">    public static int currentLevel = 0; // The first level is essentially Level 0 to Unity, so we start the counter from 0.</span><br><span class="line">    public static void CompleteLevel()</span><br><span class="line">    &#123;</span><br><span class="line">        currentLevel++; // Once the player touches the goal, the level counter plus one,</span><br><span class="line">        Application.LoadLevel(currentLevel);// and load the next level.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once the scripts are taken care of, we need to add the “Goal” tag to the goal object in the inspector panel.</p><p><img src="images/4.png" alt="add tag"><br><em>Voila! Test it out to see if you can switch between stages.</em></p><h3 id="Save-all-stuff-for-the-next-time"><a href="#Save-all-stuff-for-the-next-time" class="headerlink" title="Save all stuff for the next time."></a>Save all stuff for the next time.</h3><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://udemy-images.udemy.com/course/750x422/1210008_6859.jpg&quot; alt=&quot;Unity Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;As one of the most popular editor/engi
      
    
    </summary>
    
    
      <category term="Unity, Tutorials" scheme="https:/vincentfeng.me/tags/Unity-Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https:/vincentfeng.me/2018/08/18/hello-world/"/>
    <id>https:/vincentfeng.me/2018/08/18/hello-world/</id>
    <published>2018-08-18T13:33:08.607Z</published>
    <updated>2018-08-18T13:33:08.607Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
